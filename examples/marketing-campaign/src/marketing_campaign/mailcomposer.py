# generated by datamodel-codegen:
#   filename:  /var/folders/f8/qvj2_dq10d1375b7t9fn1_3m0000gn/T/tmp9vlzdd98/openapi.yaml
#   timestamp: 2025-03-15T16:24:33+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Type(Enum):
    human = 'human'
    assistant = 'assistant'
    ai = 'ai'


class Message(BaseModel):
    type: Type = Field(
        ...,
        description='indicates the originator of the message, a human or an assistant',
    )
    content: str = Field(..., description='the content of the message')


class InputSchema(BaseModel):
    messages: List[Message] = Field(
        ...,
        description='A list of messages in a chat. Messages can be either from human or from an AI assistant.',
    )
    is_completed: bool = Field(
        ...,
        description='Flag indicating if the conversation in the chat is completed, because the email composed is accepted by the user',
    )


class Message1(BaseModel):
    type: Type = Field(
        ...,
        description='indicates the originator of the message, a human or an assistant',
    )
    content: str = Field(..., description='the content of the message')


class OutputSchema(BaseModel):
    messages: List[Message1] = Field(
        ...,
        description='A list of messages in a chat. Messages can be either from human or from an AI assistant.',
    )
    is_completed: bool = Field(
        ...,
        description='Flag indicating if the conversation in the chat is completed, because the email composed is accepted by the user',
    )
    final_email: Optional[str] = Field(
        None, description='final email created by the email composer'
    )


class ConfigSchema(BaseModel):
    test: bool
