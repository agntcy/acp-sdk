components:
  schemas:
    Agent:
      description: A description of an agent supported by this server
      properties:
        agent_id:
          description: Unique identifier of the agent in this server.
          format: uuid
          title: Agent Id
          type: string
        metadata:
          $ref: '#/components/schemas/AgentMetadata'
      required:
      - agent_id
      - metadata
      title: Agent
      type: object
    AgentACPDescriptor:
      description: Describe all the ACP specs of an agent, including schemas and protocol
        features.
      properties:
        metadata:
          $ref: '#/components/schemas/AgentMetadata'
        specs:
          $ref: '#/components/schemas/AgentACPSpec'
      required:
      - metadata
      - specs
      title: Agent ACP Descriptor
      type: object
    AgentACPSpec:
      description: Specification of agent capabilities, config, input, output, and
        interrupts
      properties:
        capabilities:
          description: Declares what invocation features this agent is capable of.
          properties:
            callbacks:
              default: false
              description: This is `true` if the agent supports a webhook to report
                run results. If this is `false`, providing a `webhook` at run creation
                has no effect. If missing, it means `false`
              title: Callback Support
              type: boolean
            interrupts:
              default: false
              description: This is `true` if the agent runs can interrupt to request
                additional input and can be subsequently resumed. If missing, it means
                `false`
              title: Interrupt Support
              type: boolean
            streaming:
              description: Supported streaming modes. If missing, streaming is not
                supported.  If no mode is supported attempts to stream output will
                result in an error.
              properties:
                custom:
                  description: This is `true` if the agent supports custom objects
                    streaming. If `false` or missing, custom streaming is not supported.
                    Custom Objects streaming consists of a stream of object whose
                    schema is specified by the agent ACP descriptor under `specs.custom_streaming_update`.
                  title: Custom Objects Streaming
                  type: boolean
                values:
                  description: This is `true` if the agent supports values streaming.
                    If `false` or missing, values streaming is not supported. Values
                    streaming consists of a stream of objects of type `ValueRunResultUpdate`,
                    where each one sent over the stream fully replace the previous
                    one.
                  title: Values Streaming
                  type: boolean
              title: Streaming Modes
              type: object
            threads:
              default: false
              description: This is `true` if the agent supports run threads. If this
                is `false`, then the threads tagged with `Threads` are not available.
                If missing, it means `false`
              title: Thread Support
              type: boolean
          title: Agent Capabilities
          type: object
        config:
          description: 'This object contains an instance of an OpenAPI schema object,
            formatted as per the OpenAPI specs: https://spec.openapis.org/oas/v3.1.1.html#schema-object'
          examples:
          - address:
              type: string
            age:
              format: int32
              minimum: 0
              type: integer
            name:
              type: string
            properties: null
            required:
            - name
            type: object
          type: object
        custom_streaming_update:
          description: 'This describes the format of an Update in the streaming.  Must
            be specified if `streaming.custom` capability is true and cannot be specified
            otherwise. Format follows: https://spec.openapis.org/oas/v3.1.1.html#schema-object'
          examples:
          - address:
              type: string
            age:
              format: int32
              minimum: 0
              type: integer
            name:
              type: string
            properties: null
            required:
            - name
            type: object
          type: object
        input:
          description: 'This object contains an instance of an OpenAPI schema object,
            formatted as per the OpenAPI specs: https://spec.openapis.org/oas/v3.1.1.html#schema-object'
          examples:
          - properties:
              address:
                type: string
              age:
                format: int32
                minimum: 0
                type: integer
              name:
                type: string
            required:
            - name
            type: object
          type: object
        interrupts:
          description: List of possible interrupts that can be provided by the agent.
            If `interrupts` capability is true, this needs to have at least one item.
          items:
            properties:
              interrupt_payload:
                description: 'This object contains an instance of an OpenAPI schema
                  object, formatted as per the OpenAPI specs: https://spec.openapis.org/oas/v3.1.1.html#schema-object'
                examples:
                - address:
                    type: string
                  age:
                    format: int32
                    minimum: 0
                    type: integer
                  name:
                    type: string
                  properties: null
                  required:
                  - name
                  type: object
                type: object
              interrupt_type:
                description: Name of this interrupt type. Needs to be unique in the
                  list of interrupts.
                title: Interrupt Type Name
                type: string
              resume_payload:
                description: 'This object contains an instance of an OpenAPI schema
                  object, formatted as per the OpenAPI specs: https://spec.openapis.org/oas/v3.1.1.html#schema-object'
                examples:
                - address:
                    type: string
                  age:
                    format: int32
                    minimum: 0
                    type: integer
                  name:
                    type: string
                  properties: null
                  required:
                  - name
                  type: object
                type: object
            required:
            - interrupt_type
            - resume_payload
            - interrupt_payload
            type: object
          type: array
        output:
          description: 'This object contains an instance of an OpenAPI schema object,
            formatted as per the OpenAPI specs: https://spec.openapis.org/oas/v3.1.1.html#schema-object'
          examples:
          - address:
              type: string
            age:
              format: int32
              minimum: 0
              type: integer
            name:
              type: string
            properties: null
            required:
            - name
            type: object
          type: object
        thread_state:
          description: 'This describes the format of ThreadState.  Cannot be specified
            if `threads` capability is false. If not specified, when `threads` capability
            is true, then the API to retrieve ThreadState from a Thread or a Run is
            not available. This object contains an instance of an OpenAPI schema object,
            formatted as per the OpenAPI specs: https://spec.openapis.org/oas/v3.1.1.html#schema-object'
          examples:
          - address:
              type: string
            age:
              format: int32
              minimum: 0
              type: integer
            name:
              type: string
            properties: null
            required:
            - name
            type: object
          type: object
      required:
      - capabilities
      - input
      - output
      - config
      title: Agent ACP Specs
      type: object
    AgentMetadata:
      description: Basic information associated to the agent
      properties:
        description:
          description: Description of this agent, which should include what the intended
            use is, what tasks it accomplishes and how uses input and configs to produce
            the output and any other side effect
          title: Description
          type: string
        ref:
          $ref: '#/components/schemas/AgentRef'
      required:
      - ref
      - description
      title: Agent Metadata
      type: object
    AgentRef:
      description: Reference to an Agent Record in the Agent Directory, it includes
        name, version and a locator.
      properties:
        name:
          description: Name of the agent that identifies the agent in its record
          title: Name
          type: string
        url:
          description: URL of the record. Can be a network location, i.e. an entry
            in the Agent Directory or a file.
          format: uri
          title: Agent Record URL
          type: string
        version:
          description: Version of the agent in its record. Should be formatted according
            to semantic versioning (https://semver.org)
          title: Version
          type: string
      required:
      - name
      - version
      title: Agent Reference
      type: object
    AgentSearchRequest:
      description: Payload for listing agents.
      properties:
        limit:
          default: 10
          description: Maximum number to return.
          maximum: 1000
          minimum: 1
          title: Limit
          type: integer
        name:
          description: Match all agents with the name specified.
          title: Name
          type: string
        offset:
          default: 0
          description: Offset to start from.
          minimum: 0
          title: Offset
          type: integer
        version:
          description: Match all agents with the version specified. Formatted according
            to semantic versioning (https://semver.org)
          title: Version
          type: string
      title: AgentSearchRequest
      type: object
    ConfigSchema:
      description: The configuration of the agent
      properties:
        test:
          type: boolean
      type: object
    CustomRunResultUpdate:
      description: Object holding a custom defined update of the agent result during
        streaming.
      properties:
        run_id:
          description: The ID of the run.
          format: uuid
          title: Run Id
          type: string
        status:
          $ref: '#/components/schemas/RunStatus'
          description: Status of the Run when this result was generated
          title: Run Status
        type:
          enum:
          - custom
          title: Streaming Output Type
          type: string
        update:
          $ref: '#/components/schemas/StreamUpdateSchema'
      required:
      - type
      - status
      - update
      title: Custom Run Result Update
      type: object
    ErrorResponse:
      description: Error message returned from the server
      title: ErrorResponse
      type: string
    InputSchema:
      type: integer
    InterruptPayloadSchema:
      description: "This schema describes the interrupt payload. Actual schema describes\
        \ a polimorphic object, which means a schema structured with `oneOf` and `discriminator`.\
        \ The discriminator is the `interrupt_type`, while the schemas will be the\
        \ ones defined in the agent spec under `interrupts`/`interrupt_payload` For\
        \ example:          oneOf:\n  - $ref: '#/components/schemas/ApprovalInterruptPayload'\n\
        \  - $ref: '#/components/schemas/QuestionInterruptPayload'\ndiscriminator:\n\
        \  propertyName: interruput_type\n  mapping:\n    approval: '#/components/schemas/ApprovalInterruptPayload'\n\
        \    question: '#/components/schemas/QuestionInterruptPayload'"
      title: Interrupt Payload
      type: object
    Message:
      properties:
        content:
          description: The content of the message.
          oneOf:
          - type: string
          - items:
              anyOf:
              - properties:
                  metadata:
                    type: object
                  text:
                    type: string
                  type:
                    const: text
                required:
                - text
                - type
                title: MessageTextBlock
                type: object
              - properties:
                  metadata:
                    type: object
                  type:
                    type: string
                required:
                - type
                title: MessageAnyBlock
                type: object
            type: array
          title: Content
        id:
          description: The ID of the message.
          title: Id
          type: string
        metadata:
          description: The metadata of the message.
          title: Metadata
          type: object
        role:
          description: The role of the message.
          title: Role
          type: string
      required:
      - role
      - content
      type: object
    OutputSchema:
      description: The output of the agent
      examples:
      - name: John
      - name: Adele
      properties:
        name:
          type: string
      type: object
    ResumePayloadSchema:
      description: "This schema describes the resume payload after an interrupt. Actual\
        \ schema describes a polimorphic object, which means a schema structured with\
        \ `oneOf` and `discriminator`. The discriminator is the `interrupt_type`,\
        \ while the schemas will be those defined in the agent spec under `interrupts`/`resume_payload`\
        \ For example:          oneOf:\n  - $ref: '#/components/schemas/ApprovalResumePayload'\n\
        \  - $ref: '#/components/schemas/QuestionResumePayload'\ndiscriminator:\n\
        \  propertyName: interrupt_type\n  mapping:\n    approval: '#/components/schemas/ApprovalResumePayload'\n\
        \    question: '#/components/schemas/QuestionResumePayload'"
      title: Resume Payload Schema
      type: object
    Run:
      description: Holds common information of a run
      properties:
        agent_id:
          description: The agent that was used for this run.
          format: uuid
          title: Agent Id
          type: string
        created_at:
          description: The time the run was created.
          format: date-time
          title: Created At
          type: string
        run_id:
          description: The ID of the run.
          format: uuid
          title: Run Id
          type: string
        status:
          $ref: '#/components/schemas/RunStatus'
          description: The status of the run. One of 'pending', 'error', 'success',
            'timeout', 'interrupted'.
          title: Status
        thread_id:
          description: Optional Thread ID wher the Run belongs to. This is populated
            only for runs on agents agents supporting Threads.
          format: uuid
          title: Agent ID
          type: string
        updated_at:
          description: The last time the run was updated.
          format: date-time
          title: Updated At
          type: string
      required:
      - run_id
      - agent_id
      - created_at
      - updated_at
      - status
      title: Agent Run
    RunCreate:
      description: Payload for creating a run.
      properties:
        after_seconds:
          description: The number of seconds to wait before starting the run. Use
            to schedule future runs.
          title: After Seconds
          type: integer
        agent_id:
          description: The agent ID to run. If not provided will use the default agent
            for this service.
          title: Agent Id
          type: string
        config:
          description: The configuration for the agent.
          properties:
            configurable:
              $ref: '#/components/schemas/ConfigSchema'
            recursion_limit:
              title: Recursion Limit
              type: integer
            tags:
              items:
                type: string
              title: Tags
              type: array
          title: Config
          type: object
        input:
          $ref: '#/components/schemas/InputSchema'
        metadata:
          description: Metadata to assign to the run.
          title: Metadata
          type: object
        multitask_strategy:
          default: reject
          description: Multitask strategy to use. Must be one of 'reject', 'interrupt',
            'rollback', or 'enqueue'.
          enum:
          - reject
          - rollback
          - interrupt
          - enqueue
          title: Multitask Strategy
          type: string
        on_disconnect:
          default: cancel
          description: The disconnect mode to use. Must be one of 'cancel' or 'continue'.
          enum:
          - cancel
          - continue
          title: On Disconnect
          type: string
        webhook:
          description: Webhook to call upon change of run status. This is a url that
            accepts a POST containing the `Run` object as body. See Callbacks definition.
          format: uri
          maxLength: 65536
          minLength: 1
          title: Status change webhook
          type: string
      required: []
      title: RunCreateStateful
      type: object
    RunCreateStateful:
      allOf:
      - $ref: '#/components/schemas/RunCreate'
      - properties:
          if_not_exists:
            default: reject
            description: How to handle missing thread. Must be either 'reject' (raise
              error if missing), or 'create' (create new thread).
            enum:
            - create
            - reject
            title: If Not Exists
            type: string
          stream_subgraphs:
            default: false
            description: Whether to stream output from subgraphs.
            title: Stream Subgraphs
            type: boolean
        type: object
      description: Payload for creating a stateful run.
      title: RunCreateStateful
    RunCreateStateless:
      allOf:
      - $ref: '#/components/schemas/RunCreate'
      - properties:
          on_completion:
            default: delete
            description: Whether to delete or keep the thread created for a stateless
              run. Must be one of 'delete' or 'keep'.
            enum:
            - delete
            - keep
            title: On Completion
            type: string
        type: object
      description: Payload for creating a stateless run.
      title: RunCreateStateless
    RunError:
      description: Run terminated with an error
      properties:
        description:
          description: description of the error
          title: Error Description
          type: string
        errcode:
          description: code of the error
          title: Error Code
          type: integer
        run_id:
          description: The ID of the run.
          format: uuid
          title: Run Id
          type: string
        type:
          enum:
          - error
          title: Output Type
          type: string
      required:
      - type
      - run_id
      - errcode
      - description
      title: Run Error
      type: object
    RunInterrupt:
      description: Interrupt occurred during a Run
      properties:
        interrupt:
          $ref: '#/components/schemas/InterruptPayloadSchema'
        type:
          enum:
          - interrupt
          title: Output Type
          type: string
      required:
      - type
      - interrupt
      title: Run Interrupt
      type: object
    RunOutput:
      description: Output of a Run. Can be the final result or an interrupt.
      discriminator:
        mapping:
          error: '#/components/schemas/RunError'
          result: '#/components/schemas/RunResult'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/RunResult'
      - $ref: '#/components/schemas/RunError'
      title: Run Output
    RunOutputStream:
      description: Server-sent event containing one agent output event. Actual event
        type is carried inside the data.
      properties:
        data:
          description: A serialized JSON data structure carried in the SSE event data
            field. The event can carry either a full `ValueRunResultUpdate`, if streaming
            mode is `values` or an `CustomRunResultUpdate` if streaming mode is `custom`
          discriminator:
            mapping:
              custom: '#/components/schemas/CustomRunResultUpdate'
              values: '#/components/schemas/ValueRunResultUpdate'
            propertyName: type
          oneOf:
          - $ref: '#/components/schemas/ValueRunResultUpdate'
          - $ref: '#/components/schemas/CustomRunResultUpdate'
          title: Stream Event Payload
        event:
          description: Event type. This is the constant string `agent_event` to be
            compatible with SSE spec. The actual type differentiation is done in the
            event itself.
          enum:
          - agent_event
          type: string
        id:
          description: Unique identifier of the event
          title: Event ID
          type: string
      required:
      - id
      - event
      - data
      title: Run Output Stream Event
      type: object
    RunResult:
      description: Final result of a Run.
      properties:
        messages:
          description: The messages returned by the run.
          items:
            $ref: '#/components/schemas/Message'
          title: Messages
          type: array
        type:
          enum:
          - result
          title: Output Type
          type: string
        values:
          $ref: '#/components/schemas/OutputSchema'
      required:
      - type
      title: Run Result
      type: object
    RunSearchRequest:
      description: Payload for listing runs.
      properties:
        agent_id:
          description: Matches all the Runs associated with the specified Agent ID.
          format: uuid
          title: Agent Id
          type: string
        limit:
          default: 10
          description: Maximum number to return.
          maximum: 1000
          minimum: 1
          title: Limit
          type: integer
        metadata:
          description: Matches all threads for which metadata has  keys and values
            equal to those specified in this object.
          title: Metadata Filter
          type: object
        offset:
          default: 0
          description: Offset to start from.
          minimum: 0
          title: Offset
          type: integer
        status:
          $ref: '#/components/schemas/RunStatus'
          description: Matches all the Runs associated with the specified status.
            One of 'pending', 'error', 'success', 'timeout', 'interrupted'.
          title: Status
      title: Run Search Request
      type: object
    RunStateful:
      allOf:
      - $ref: '#/components/schemas/Run'
      - properties:
          creation:
            $ref: '#/components/schemas/RunCreateStateful'
            description: ''
            title: Creation
        required:
        - creation
        type: object
      description: Holds all the information of a stateful run
      title: Agent Run Stateful
    RunStateless:
      allOf:
      - $ref: '#/components/schemas/Run'
      - properties:
          creation:
            $ref: '#/components/schemas/RunCreateStateless'
            description: ''
            title: Creation
        required:
        - creation
        type: object
      description: Holds all the information of a stateless run
      title: Agent Run Stateless
    RunStatus:
      enum:
      - pending
      - error
      - success
      - timeout
      - interrupted
      type: string
    RunWaitResponseStateful:
      properties:
        output:
          $ref: '#/components/schemas/RunOutput'
        run:
          $ref: '#/components/schemas/RunStateful'
          description: The run information.
          title: Run
      type: object
    RunWaitResponseStateless:
      properties:
        output:
          $ref: '#/components/schemas/RunOutput'
        run:
          $ref: '#/components/schemas/RunStateless'
          description: The run information.
          title: Run
      type: object
    StreamUpdateSchema:
      description: An update in the SSE event streaming where streaming mode is set
        to custom. The schema is described in agent ACP descriptor under 'spec.custom_streaming_update'.
      title: Stream Update Schema
      type: object
    StreamingMode:
      enum:
      - values
      - custom
      type: string
    Thread:
      description: Represents a collection of consecutive runs over a thread.  Thread
        is associated with a state. Runs for a thread can potentially happen across
        different agents, if the state format is compatible.
      properties:
        created_at:
          description: The time the thread was created.
          format: date-time
          title: Created At
          type: string
        messages:
          description: The current Messages of the thread. If messages are contained
            in Thread.values, implementations should remove them from values when
            returning messages. When this key isn't present it means the thread/agent
            doesn't support messages.
          items:
            $ref: '#/components/schemas/Message'
          title: Messages
          type: array
        metadata:
          description: Free form metadata for this thread
          title: Metadata
          type: object
        status:
          description: The status of the thread.
          enum:
          - idle
          - busy
          - interrupted
          - error
          title: Status
          type: string
        thread_id:
          description: unique identifier of a thread
          title: Thread ID
          type: string
        updated_at:
          description: The last time the thread was updated.
          format: date-time
          title: Updated At
          type: string
        values:
          $ref: '#/components/schemas/ThreadStateSchema'
          description: The current state of the thread.
          title: Values
      required:
      - thread_id
      - created_at
      - updated_at
      - metadata
      - status
      title: Thread
      type: object
    ThreadCheckpoint:
      description: Structured identifier for a thread checkpoint, ie. an entry in
        the thread's history.
      properties:
        checkpoint_id:
          description: The ID of the checkpoint.
          format: uuid
          title: Checkpoint Id
          type: string
      required:
      - checkpoint_id
      title: ThreadCheckpoint
      type: object
    ThreadCreate:
      description: Detail of an empty thread to be created.
      properties:
        if_exists:
          default: raise
          description: How to handle duplicate creation. Must be either 'raise' (raise
            error if duplicate), or 'do_nothing' (return existing thread).
          enum:
          - raise
          - do_nothing
          title: If Exists
          type: string
        metadata:
          description: Free form metadata for this thread
          title: Metadata
          type: object
        thread_id:
          description: The ID of the thread. If not provided, a random UUID will be
            generated.
          format: uuid
          title: Thread Id
          type: string
      title: Thread
      type: object
    ThreadPatch:
      description: Payload for updating a thread.
      properties:
        checkpoint:
          $ref: '#/components/schemas/ThreadCheckpoint'
          description: The identifier of the checkpoint to branch from. Ignored for
            metadata-only patches. If not provided, defaults to the latest checkpoint.
          title: Checkpoint
        messages:
          description: The current Messages of the thread. If messages are contained
            in Thread.values, implementations should remove them from values when
            returning messages. When this key isn't present it means the thread/agent
            doesn't support messages.
          items:
            $ref: '#/components/schemas/Message'
          title: Messages
          type: array
        metadata:
          description: Metadata to merge with existing thread metadata.
          title: Metadata
          type: object
        values:
          $ref: '#/components/schemas/ThreadStateSchema'
          description: The current state of the thread.
          title: Values
      title: ThreadPatch
      type: object
    ThreadSearchRequest:
      description: Payload for listing threads.
      properties:
        limit:
          default: 10
          description: Maximum number to return.
          maximum: 1000
          minimum: 1
          title: Limit
          type: integer
        metadata:
          description: Matches all threads for which metadata has  keys and values
            equal to those specified in this object.
          title: Metadata Filter
          type: object
        offset:
          default: 0
          description: Offset to start from.
          minimum: 0
          title: Offset
          type: integer
        status:
          $ref: '#/components/schemas/ThreadStatus'
        values:
          description: State values to filter on.
          title: Values
          type: object
      title: Thread Search Request
      type: object
    ThreadState:
      properties:
        checkpoint:
          $ref: '#/components/schemas/ThreadCheckpoint'
          description: The identifier for this checkpoint.
          title: Checkpoint
        messages:
          description: The current messages of the thread. If messages are contained
            in Thread.values, implementations should remove them from values when
            returning messages. When this key isn't present it means the thread/agent
            doesn't support messages.
          items:
            $ref: '#/components/schemas/Message'
          title: Messages
          type: array
        metadata:
          description: The checkpoint metadata.
          title: Metadata
          type: object
        values:
          $ref: '#/components/schemas/ThreadStateSchema'
          description: The current state of the thread.
          title: Values
      required:
      - checkpoint
      - values
      title: ThreadState
      type: object
    ThreadStateSchema:
      description: The state of the agent
      properties:
        state:
          type: string
      type: object
    ThreadStatus:
      enum:
      - idle
      - busy
      - interrupted
      - error
      type: string
    ValueRunResultUpdate:
      description: Partial result provided as value through streaming.
      properties:
        messages:
          description: Stream of messages returned by the run.
          items:
            $ref: '#/components/schemas/Message'
          title: Messages
          type: array
        run_id:
          description: The ID of the run.
          format: uuid
          title: Run Id
          type: string
        status:
          $ref: '#/components/schemas/RunStatus'
          description: Status of the Run when this result was generated. This is particurarly
            useful when this data structure is used for streaming results. As the
            server can indicate an interrupt or an error condition while streaming
            the result.
          title: Run Status
        type:
          enum:
          - values
          title: Streaming Output Type
          type: string
        values:
          $ref: '#/components/schemas/OutputSchema'
      required:
      - type
      - run_id
      - status
      - values
      title: Value Run Result Update
      type: object
info:
  title: ACP Spec for org.agntcy.sample-agent-1:0.0.1
  version: 0.2.1
openapi: 3.1.1
paths:
  /agents/search:
    post:
      description: 'Returns a list of agents matching the criteria provided in the
        request.


        This endpoint also functions as the endpoint to list all agents.'
      operationId: search_agents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentSearchRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Agent'
                title: Matching Agent List
                type: array
          description: Success
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Search Agents
      tags:
      - Agents
  /agents/{agent_id}:
    get:
      description: Get an agent by ID.
      operationId: get_agent_by_id
      parameters:
      - description: The ID of the agent.
        in: path
        name: agent_id
        required: true
        schema:
          description: The ID of the agent.
          format: uuid
          title: Agent Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
      summary: Get Agent
      tags:
      - Agents
  /agents/{agent_id}/descriptor:
    get:
      description: Get agent ACP descriptor by agent ID.
      operationId: get_acp_descriptor_by_id
      parameters:
      - description: The ID of the agent.
        in: path
        name: agent_id
        required: true
        schema:
          description: The ID of the agent.
          format: uuid
          title: Agent Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentACPDescriptor'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Get Agent ACP Descriptor from its id
      tags:
      - Agents
  /runs:
    post:
      callbacks:
        runstatuschange:
          '{$request.body#/webhook}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/RunStateless'
                required: true
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      description: Create a stateless run, return the run ID immediately. Don't wait
        for the final run output.
      operationId: create_stateless_run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunCreateStateless'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStateless'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Create a Background stateless Run
      tags:
      - Stateless Runs
  /runs/search:
    post:
      description: 'Search for stateless run.


        This endpoint also functions as the endpoint to list all stateless Runs.'
      operationId: search_stateless_runs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunSearchRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RunStateless'
                title: Run Search Response
                type: array
          description: Success
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Search Stateless Runs
      tags:
      - Stateless Runs
  /runs/stream:
    post:
      description: Create a stateless run and join its output stream. See 'GET /runs/{run_id}/stream'
        for details on the return values.
      operationId: create_and_stream_stateless_run_output
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunCreateStateless'
        required: true
      responses:
        '200':
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/RunOutputStream'
          description: Stream of agent results either as `ValueRunResultUpdate` objects
            or `CustomRunResultUpdate` objects, according to the specific streaming
            mode requested. Note that the stream of events is carried using the format
            specified in SSE spec `text/event-stream`
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Create a stateless run and stream its output
      tags:
      - Stateless Runs
  /runs/wait:
    post:
      description: Create a stateless run and wait for its output. See 'GET /runs/{run_id}/wait'
        for details on the return values.
      operationId: create_and_wait_for_stateless_run_output
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunCreateStateless'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunWaitResponseStateless'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Create a stateless run and wait for its output
      tags:
      - Stateless Runs
  /runs/{run_id}:
    delete:
      description: Delete a stateless run by ID.
      operationId: delete_stateless_run
      responses:
        '204':
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Delete Stateless Run
      tags:
      - Stateless Runs
    get:
      description: Get a stateless run by ID.
      operationId: get_stateless_run
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStateless'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Get Run
      tags:
      - Stateless Runs
    parameters:
    - description: The ID of the run.
      in: path
      name: run_id
      required: true
      schema:
        description: The ID of the run.
        format: uuid
        title: Run Id
        type: string
  /runs/{run_id}/cancel:
    post:
      operationId: cancel_stateless_run
      parameters:
      - description: The ID of the run.
        in: path
        name: run_id
        required: true
        schema:
          description: The ID of the run.
          format: uuid
          title: Run Id
          type: string
      - in: query
        name: wait
        required: false
        schema:
          default: false
          title: Wait
          type: boolean
      - description: Action to take when cancelling the run. Possible values are `interrupt`
          or `rollback`. `interrupt` will simply cancel the run. `rollback` will cancel
          the run and delete the run and associated checkpoints afterwards.
        in: query
        name: action
        required: false
        schema:
          default: interrupt
          enum:
          - interrupt
          - rollback
          title: Action
          type: string
      responses:
        '204':
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Cancel Stateless Run
      tags:
      - Stateless Runs
  /runs/{run_id}/wait:
    get:
      description: "Blocks waiting for the result of the run. The output can be:\n\
        \  * an interrupt, this happens when the agent run status is `interrupted`\n\
        \  * the final result of the run, this happens when the agent run status is\
        \ `success`\n  * an error, this happens when the agent run status is `error`\
        \ or `timeout`\n\n\nThis call blocks until the output is available."
      operationId: wait_for_stateless_run_output
      parameters:
      - description: The ID of the run.
        in: path
        name: run_id
        required: true
        schema:
          description: The ID of the run.
          format: uuid
          title: Run Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunWaitResponseStateless'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Blocks waiting for the result of the run.
      tags:
      - Stateless Runs
  /threads:
    post:
      description: 'Create a new thread. '
      operationId: create_thread
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
          description: Success
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Create an empty Thread
      tags:
      - Threads
  /threads/search:
    post:
      description: 'Search for threads.


        This endpoint also functions as the endpoint to list all threads.'
      operationId: search_threads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadSearchRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Thread'
                title: Response Search Agents Agents Search Post
                type: array
          description: Success
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Search Threads
      tags:
      - Threads
  /threads/{thread_id}:
    delete:
      description: Delete a thread.
      operationId: delete_thread
      responses:
        '204':
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Delete a thread. If the thread contains any pending run, deletion fails.
      tags:
      - Threads
    get:
      description: 'Get a thread from its ID. '
      operationId: get_thread
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Get Thread
      tags:
      - Threads
    parameters:
    - description: The ID of the thread.
      in: path
      name: thread_id
      required: true
      schema:
        description: The ID of the thread.
        format: uuid
        title: Thread ID
        type: string
    patch:
      description: Update a thread.
      operationId: patch_thread
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Patch Thread
      tags:
      - Threads
  /threads/{thread_id}/copy:
    post:
      description: Create a new thread with a copy of the state and checkpoints from
        an existing thread.
      operationId: copy_thread
      parameters:
      - description: The ID of the thread.
        in: path
        name: thread_id
        required: true
        schema:
          description: The ID of the thread.
          format: uuid
          title: Thread Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Copy Thread
      tags:
      - Threads
  /threads/{thread_id}/history:
    get:
      description: Get all past states for a thread.
      operationId: get_thread_history
      parameters:
      - description: The ID of the thread.
        in: path
        name: thread_id
        required: true
        schema:
          description: The ID of the thread.
          format: uuid
          title: Thread Id
          type: string
      - in: query
        name: limit
        required: false
        schema:
          default: 10
          title: Limit
          type: integer
      - in: query
        name: before
        required: false
        schema:
          title: Before
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ThreadState'
                type: array
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Get Thread History
      tags:
      - Threads
  /threads/{thread_id}/runs:
    get:
      description: List runs for a thread.
      operationId: list_thread_runs
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 10
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          title: Offset
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RunStateful'
                type: array
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: List Runs for a thread
      tags:
      - Thread Runs
    parameters:
    - description: The ID of the thread.
      in: path
      name: thread_id
      required: true
      schema:
        description: The ID of the thread.
        format: uuid
        title: Thread ID
        type: string
    post:
      callbacks:
        runstatuschange:
          '{$request.body#/webhook}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/RunStateful'
                required: true
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      description: Create a run on a thread, return the run ID immediately. Don't
        wait for the final run output.
      operationId: create_thread_run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunCreateStateful'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStateful'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Create a Background Run on a thread
      tags:
      - Thread Runs
  /threads/{thread_id}/runs/stream:
    post:
      description: Create a run on a thread and join its output stream. See 'GET /runs/{run_id}/stream'
        for details on the return values.
      operationId: create_and_stream_thread_run_output
      parameters:
      - description: The ID of the thread.
        in: path
        name: thread_id
        required: true
        schema:
          description: The ID of the thread.
          format: uuid
          title: Thread Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunCreateStateful'
        required: true
      responses:
        '200':
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/RunOutputStream'
          description: Stream of agent results either as `ValueRunResultUpdate` objects
            or `CustomRunResultUpdate` objects, according to the specific streaming
            mode requested. Note that the stream of events is carried using the format
            specified in SSE spec `text/event-stream`
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Create a run on a thread and stream its output
      tags:
      - Thread Runs
  /threads/{thread_id}/runs/wait:
    post:
      description: Create a run on a thread and block waiting for its output. See
        'GET /runs/{run_id}/wait' for details on the return values.
      operationId: create_and_wait_for_thread_run_output
      parameters:
      - description: The ID of the thread.
        in: path
        name: thread_id
        required: true
        schema:
          description: The ID of the thread.
          format: uuid
          title: Thread Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunCreateStateful'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunWaitResponseStateful'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Create a run on a thread and block waiting for the result of the run
      tags:
      - Thread Runs
  /threads/{thread_id}/runs/{run_id}:
    delete:
      description: Delete a run by ID.
      operationId: delete_thread_run
      responses:
        '204':
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Delete Run
      tags:
      - Thread Runs
    get:
      description: Get a run by ID.
      operationId: get_thread_run
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStateful'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Get Run
      tags:
      - Thread Runs
    parameters:
    - description: The ID of the thread.
      in: path
      name: thread_id
      required: true
      schema:
        description: The ID of the thread.
        format: uuid
        title: Thread Id
        type: string
    - description: The ID of the run.
      in: path
      name: run_id
      required: true
      schema:
        description: The ID of the run.
        format: uuid
        title: Run Id
        type: string
    post:
      description: Provide the needed input to a run to resume its execution. Can
        only be called for runs that are in the interrupted state Schema of the provided
        input must match with the schema specified in the agent specs under interrupts
        for the interrupt type the agent generated for this specific interruption.
      operationId: resume_thread_run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumePayloadSchema'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStateful'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Resume an interrupted Run
      tags:
      - Thread Runs
  /threads/{thread_id}/runs/{run_id}/cancel:
    post:
      operationId: cancel_thread_run
      parameters:
      - description: The ID of the thread.
        in: path
        name: thread_id
        required: true
        schema:
          description: The ID of the thread.
          format: uuid
          title: Thread Id
          type: string
      - description: The ID of the run.
        in: path
        name: run_id
        required: true
        schema:
          description: The ID of the run.
          format: uuid
          title: Run Id
          type: string
      - in: query
        name: wait
        required: false
        schema:
          default: false
          title: Wait
          type: boolean
      - description: Action to take when cancelling the run. Possible values are `interrupt`
          or `rollback`. `interrupt` will simply cancel the run. `rollback` will cancel
          the run and delete the run and associated checkpoints afterwards.
        in: query
        name: action
        required: false
        schema:
          default: interrupt
          enum:
          - interrupt
          - rollback
          title: Action
          type: string
      responses:
        '204':
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Cancel Run
      tags:
      - Thread Runs
  /threads/{thread_id}/runs/{run_id}/stream:
    get:
      description: Join the output stream of an existing run. See 'GET /runs/{run_id}/stream'
        for details on the return values.
      operationId: stream_thread_run_output
      parameters:
      - description: The ID of the thread.
        in: path
        name: thread_id
        required: true
        schema:
          description: The ID of the thread.
          format: uuid
          title: Thread Id
          type: string
      - description: The ID of the run.
        in: path
        name: run_id
        required: true
        schema:
          description: The ID of the run.
          format: uuid
          title: Run Id
          type: string
      responses:
        '200':
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/RunOutputStream'
          description: Stream of agent results either as `ValueRunResultUpdate` objects
            or `CustomRunResultUpdate` objects, according to the specific streaming
            mode requested. Note that the stream of events is carried using the format
            specified in SSE spec `text/event-stream`
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Stream output from Run
      tags:
      - Thread Runs
  /threads/{thread_id}/runs/{run_id}/wait:
    get:
      description: Blocks waiting for the result of the run. See 'GET /runs/{run_id}/wait'
        for details on the return values.
      operationId: wait_for_thread_run_output
      parameters:
      - description: The ID of the thread.
        in: path
        name: thread_id
        required: true
        schema:
          description: The ID of the thread.
          format: uuid
          title: Thread Id
          type: string
      - description: The ID of the run.
        in: path
        name: run_id
        required: true
        schema:
          description: The ID of the run.
          format: uuid
          title: Run Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunWaitResponseStateful'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation Error
      summary: Blocks waiting for the result of the run.
      tags:
      - Thread Runs
tags:
- description: "Agents are AI workflows that can be configured and/or executed on\
    \ this server.  This means that a client of this server can start a Run on any\
    \ of the Agents supported by this server.\nEach agent may support different features\
    \ of ACP, also each agent specifies the schemas of the objects carried by ACP\
    \ for  configuration, input, output, interrupts and state. \nDetails of the ACP\
    \ features and the schemas are kept in the ACP descriptor of the specific agent.\
    \  This object can be retrieved through this ACP interface or is found in the\
    \ ACP extension of the agent record in the agent directory.\nSee `Agent` and `AgentACPDescriptor`\
    \ models below for more info."
  name: Agents
- description: "If supported by the involved agents, Run can be grouped in Threads.\
    \ \nWhen a run is executed on a thread is called Thread Run. At the end of a Thread\
    \ Run, the server keeps a thread state associated to the thread.\nA thread keeps\
    \ track of agent states at every step so that continuity of the context is preserved.\
    \ Moreover, such a book-keeping enables us some granular controls like debugging,\
    \ interrupting or replaying a run/invocation.\n\nA thread state is a data context\
    \ defined by the developer and can be anything and it gets passed through from\
    \ one invocation to another so that business logic is instrumented by data.\n\n\
    A thread keeps track of the whole state history. At every step, it also applies\
    \ a checkpoint, which is primarily a `uuid`, so that it is easier to refer to\
    \ a chunk of the history.\n\nOne can easily query the last state, a specific state\
    \ (by checkpoint id), the whole state history, or, a part of the history (from\
    \ a checkpoint).\n\nSee `Thread`, `ThreadState` and `Checkpoint` models below\
    \ for more info."
  name: Threads
- description: "Thread Runs are runs created on a thread. \nA Thread Run can be created\
    \ on a thread **only** if there is no run in the `pending` status on the same\
    \ thread, i.e. if the thread is in the state `idle`\nNote that runs over the same\
    \ thread can be executed on different agents, as long as the agents support the\
    \ same thread state format.\nSee `Thread` and `RunCreateStateful` for more info."
  name: Thread Runs
- description: 'A Run represents an execution of an agent.

    The output of a Run can be a final result or an interrupt.

    Result from a run can be retrieved by polling or by blocking and waiting for the
    result.

    See `Run`  and `RunOutput` models below for more info.'
  name: Stateless Runs

